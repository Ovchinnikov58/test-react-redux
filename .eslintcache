[{"D:\\projects\\test-react-redux\\src\\index.js":"1","D:\\projects\\test-react-redux\\src\\reportWebVitals.js":"2","D:\\projects\\test-react-redux\\src\\App.js":"3","D:\\projects\\test-react-redux\\src\\pages\\home\\Home.js":"4","D:\\projects\\test-react-redux\\src\\pages\\attendance\\Attendance.js":"5","D:\\projects\\test-react-redux\\src\\components\\menu\\Menu.js":"6","D:\\projects\\test-react-redux\\src\\pages\\info\\Info.js":"7","D:\\projects\\test-react-redux\\src\\pages\\notFound\\NotFound.js":"8","D:\\projects\\test-react-redux\\src\\hoc\\Layout\\Layout.js":"9","D:\\projects\\test-react-redux\\src\\components\\footer\\Footer.js":"10","D:\\projects\\test-react-redux\\src\\components\\base\\input\\Input.js":"11","D:\\projects\\test-react-redux\\src\\components\\base\\button\\Button.js":"12","D:\\projects\\test-react-redux\\src\\pages\\contacts\\Contacts.js":"13"},{"size":601,"mtime":1612112285446,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"16","hashOfConfig":"15"},{"size":841,"mtime":1612111490852,"results":"17","hashOfConfig":"15"},{"size":15734,"mtime":1612112021247,"results":"18","hashOfConfig":"15"},{"size":2088,"mtime":1612111948067,"results":"19","hashOfConfig":"15"},{"size":2996,"mtime":1612114395513,"results":"20","hashOfConfig":"15"},{"size":4033,"mtime":1612111082369,"results":"21","hashOfConfig":"15"},{"size":296,"mtime":1612111735503,"results":"22","hashOfConfig":"15"},{"size":501,"mtime":1611910028285,"results":"23","hashOfConfig":"15"},{"size":281,"mtime":1611910408395,"results":"24","hashOfConfig":"15"},{"size":1171,"mtime":1612092272603,"results":"25","hashOfConfig":"15"},{"size":416,"mtime":1612095598863,"results":"26","hashOfConfig":"15"},{"size":462,"mtime":1612111599402,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"tcdat4",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"D:\\projects\\test-react-redux\\src\\index.js",[],["58","59"],"D:\\projects\\test-react-redux\\src\\reportWebVitals.js",[],"D:\\projects\\test-react-redux\\src\\App.js",["60"],"import Home from './pages/home/Home'\nimport Attendance from './pages/attendance/Attendance'\nimport Info from './pages/info/Info'\nimport Contacts from './pages/contacts/Contacts'\nimport NotFound from './pages/notFound/NotFound'\nimport Menu from './components/menu/Menu'\nimport Layout from \"./hoc/Layout/Layout\";\nimport {Route, Switch} from 'react-router-dom';\nimport classes from './App.scss';\n\nfunction App() {\n    return (\n        <Layout>\n            <Menu />\n            <Switch>\n                <Route path=\"/\" exact component={Home}/>\n                <Route path=\"/attendance\" component={Attendance}/>\n                <Route path=\"/info\" component={Info}/>\n                <Route path=\"/contacts\" component={Contacts}/>\n                <Route component={NotFound}/>\n            </Switch>\n        </Layout>\n    );\n}\n\nexport default App;\n","D:\\projects\\test-react-redux\\src\\pages\\home\\Home.js",["61","62","63"],"import React from 'react';\r\nimport Input from '../../components/base/input/Input'\r\nimport Button from '../../components/base/button/Button'\r\nimport classes from './Home.module.scss'\r\n\r\nclass Home extends React.Component {\r\n    state = {\r\n        isFormValid: false,\r\n        formControls: [\r\n            {\r\n                value: '',\r\n                type: 'text',\r\n                label: 'Введите название предмета',\r\n                errorMessage: 'Поле не должно быть пустым',\r\n                valid: false,\r\n                touched: false,\r\n                validation: {\r\n                    required: true\r\n                }\r\n            },\r\n            {\r\n                value: '',\r\n                type: 'number',\r\n                label: 'Введите количество оценок',\r\n                errorMessage: 'Введите число больше 0',\r\n                valid: false,\r\n                touched: false,\r\n                validation: {\r\n                    required: true,\r\n                    interval: true\r\n                }\r\n            },\r\n            {\r\n                value: '',\r\n                type: 'number',\r\n                label: 'Пропущенные занятия по уважительной причине',\r\n                errorMessage: 'Поле не должно быть пустым',\r\n                valid: false,\r\n                touched: false,\r\n                validation: {\r\n                    required: true,\r\n                    missed: true\r\n                }\r\n            },\r\n            {\r\n                value: '',\r\n                type: 'number',\r\n                label: 'Пропущенные занятия по неуважительной причине',\r\n                errorMessage: 'Поле не должно быть пустым',\r\n                valid: false,\r\n                touched: false,\r\n                validation: {\r\n                    required: true,\r\n                    missed: true\r\n                }\r\n            },\r\n            {\r\n                value: '',\r\n                type: 'number',\r\n                label: 'Всего занятий в семестре',\r\n                errorMessage: 'Значение не может быть меньше суммы пропущенных в семестре и меньше нуля',\r\n                valid: false,\r\n                touched: false,\r\n                validation: {\r\n                    required: true,\r\n                    lessons: true\r\n                }\r\n            }\r\n        ],\r\n        markControls: [],\r\n        result: {\r\n            lesson: '',\r\n            middleValue: '',\r\n            procent: '',\r\n            exam: '',\r\n            disRespectful: '',\r\n            respectful: ''\r\n        }\r\n    }\r\n\r\n    validateControl(value, validation) {\r\n        if (!validation) {\r\n            return true\r\n        }\r\n\r\n        let isValid = true\r\n\r\n        if (validation.required) {\r\n            isValid = value.trim() !== '' && isValid\r\n        }\r\n\r\n        if (validation.interval) {\r\n            isValid = Number(value.trim()) > 0 && isValid\r\n        }\r\n\r\n        if (validation.markInterval) {\r\n            isValid = Number(value.trim()) > 1 && Number(value.trim()) <= 5 && isValid\r\n        }\r\n\r\n        if (validation.lessons) {\r\n            if (this.state.formControls[2].value !== '' && this.state.formControls[3].value !== '') {\r\n                let checkValues = Number(this.state.formControls[2].value) + Number(this.state.formControls[3].value)\r\n                isValid = Number(value.trim()) > 0 && isValid && Number(value.trim()) >= Number(checkValues)\r\n            }\r\n        }\r\n\r\n        if (validation.missed) {\r\n            if (this.state.formControls[4].value !== '') {\r\n\r\n            }\r\n        }\r\n\r\n        return isValid\r\n    }\r\n\r\n    onChangeHandler = (event, controlIndex) => {\r\n        const formControls = [ ...this.state.formControls ]\r\n        const control = formControls[controlIndex]\r\n\r\n        control.value = event.target.value\r\n        control.touched = true\r\n        control.valid = this.validateControl(control.value, control.validation)\r\n\r\n        if (control.validation.interval) {\r\n            const markControls = [];\r\n            for (let i = 0; i < Number(control.value.trim()); i++) {\r\n                markControls.push(\r\n                    {\r\n                        id: `${i}`,\r\n                        value: '',\r\n                        type: 'number',\r\n                        label: 'Введите оценку',\r\n                        errorMessage: 'Введите число от 2 до 5',\r\n                        valid: false,\r\n                        touched: false,\r\n                        validation: {\r\n                            required: true,\r\n                            markInterval: true\r\n                        }\r\n                    }\r\n                );\r\n            }\r\n            this.setState({\r\n                markControls\r\n            })\r\n        }\r\n\r\n        formControls[controlIndex] = control\r\n\r\n        this.setState({\r\n            formControls\r\n        })\r\n        this.checkIsFormValid()\r\n    }\r\n\r\n    onChangeMarkHandler = (event) => {\r\n        const markControls = [ ...this.state.markControls ]\r\n        const markId = event.target.parentNode.id\r\n        const control = markControls[markId]\r\n\r\n        control.value = event.target.value\r\n        control.touched = true\r\n        control.valid = this.validateControl(control.value, control.validation)\r\n\r\n        this.setState({\r\n            markControls\r\n        })\r\n        this.checkIsFormValid()\r\n    }\r\n\r\n    checkIsFormValid = () => {\r\n        let isFormValid = true\r\n\r\n        Object.keys(this.state.formControls).forEach(name => {\r\n            isFormValid = this.state.formControls[name].valid && isFormValid\r\n        })\r\n\r\n        this.state.markControls.forEach(el => {\r\n            isFormValid = el.valid && isFormValid\r\n        })\r\n\r\n        if (this.state.markControls.length === 0) {\r\n            isFormValid = false\r\n        }\r\n\r\n        this.setState({\r\n            isFormValid\r\n        })\r\n    }\r\n\r\n    renderMarkInputs() {\r\n        if (this.state.markControls.length !== 0 && Array.isArray(this.state.markControls)) {\r\n            return this.state.markControls.map((item, index) => {\r\n                return (\r\n                    <Input\r\n                        id={index}\r\n                        key={'mark' + index}\r\n                        label={item.label}\r\n                        type={item.type}\r\n                        value={item.value}\r\n                        valid={item.valid}\r\n                        touched={item.touched}\r\n                        errorMessage={item.errorMessage}\r\n                        onChange={event => this.onChangeMarkHandler(event)}\r\n                    />\r\n                )\r\n            })\r\n        }\r\n    }\r\n\r\n    calculate = () => {\r\n        const result = { ...this.state.result }\r\n\r\n        const SumValue = this.state.markControls && this.state.markControls.reduce((sum, item) => Number(sum)\r\n            + Number(item.value), 0)\r\n        result.middleValue = SumValue/this.state.markControls.length\r\n\r\n        result.lesson = this.state.formControls[0].value\r\n        result.respectful = this.state.formControls[2].value\r\n        result.disRespectful = this.state.formControls[3].value\r\n        const lessons = this.state.formControls[4].value\r\n        result.procent = result.disRespectful*100/lessons\r\n        result.exam = false\r\n\r\n        if (result.procent < 10 && result.middleValue > 4) {\r\n            result.exam = true\r\n        }\r\n\r\n        this.setState({\r\n            result\r\n        })\r\n    }\r\n\r\n    async sendInfo() {\r\n        try {\r\n            let response = await fetch('http://localhost:8000/lessons', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json;charset=utf-8'\r\n                },\r\n                body: JSON.stringify(this.state.result)\r\n            });\r\n\r\n            let result = await response.json();\r\n            this.clearForm()\r\n        }\r\n        catch(e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n\r\n    clearForm = () => {\r\n        let inputs = document.querySelectorAll('input');\r\n\r\n        for (let i = 0;  i < inputs.length; i++) {\r\n            inputs[i].value = '';\r\n        }\r\n\r\n        let isFormValid = false;\r\n        let formControls = [\r\n            {\r\n                value: '',\r\n                type: 'text',\r\n                label: 'Введите название предмета',\r\n                errorMessage: 'Поле не должно быть пустым',\r\n                valid: false,\r\n                touched: false,\r\n                validation: {\r\n                    required: true\r\n                }\r\n            },\r\n            {\r\n                value: '',\r\n                type: 'number',\r\n                label: 'Введите количество оценок',\r\n                errorMessage: 'Введите число больше 0',\r\n                valid: false,\r\n                touched: false,\r\n                validation: {\r\n                    required: true,\r\n                    interval: true\r\n                }\r\n            },\r\n            {\r\n                value: '',\r\n                type: 'number',\r\n                label: 'Пропущенные занятия по уважительной причине',\r\n                errorMessage: 'Поле не должно быть пустым',\r\n                valid: false,\r\n                touched: false,\r\n                validation: {\r\n                    required: true,\r\n                    missed: true\r\n                }\r\n            },\r\n            {\r\n                value: '',\r\n                type: 'number',\r\n                label: 'Пропущенные занятия по неуважительной причине',\r\n                errorMessage: 'Поле не должно быть пустым',\r\n                valid: false,\r\n                touched: false,\r\n                validation: {\r\n                    required: true,\r\n                    missed: true\r\n                }\r\n            },\r\n            {\r\n                value: '',\r\n                type: 'number',\r\n                label: 'Всего занятий в семестре',\r\n                errorMessage: 'Значение не может быть меньше суммы пропущенных в семестре и меньше нуля',\r\n                valid: false,\r\n                touched: false,\r\n                validation: {\r\n                    required: true,\r\n                    lessons: true\r\n                }\r\n            }\r\n        ];\r\n        let markControls = [];\r\n        let result = {\r\n            lesson: '',\r\n            middleValue: '',\r\n            procent: '',\r\n            exam: '',\r\n            disRespectful: '',\r\n            respectful: ''\r\n        };\r\n\r\n        this.setState({\r\n            formControls,\r\n            result,\r\n            isFormValid,\r\n            markControls\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const control = this.state.formControls\r\n\r\n        return (\r\n            <div className={classes.Home}>\r\n                <div className={classes.column}>\r\n                    <Input\r\n                        label={control[0].label}\r\n                        type={control[0].type}\r\n                        value={control[0].value}\r\n                        valid={control[0].valid}\r\n                        touched={control[0].touched}\r\n                        errorMessage={control[0].errorMessage}\r\n                        onChange={event => this.onChangeHandler(event, 0)}\r\n                    />\r\n                </div>\r\n                <div className={classes.column}>\r\n                    <Input\r\n                        label={control[1].label}\r\n                        type={control[1].type}\r\n                        value={control[1].value}\r\n                        valid={control[1].valid}\r\n                        touched={control[1].touched}\r\n                        errorMessage={control[1].errorMessage}\r\n                        onChange={event => this.onChangeHandler(event, 1)}\r\n                    />\r\n\r\n                    { this.renderMarkInputs() }\r\n                </div>\r\n                <div className={classes.column}>\r\n                    <Input\r\n                        disabled={this.state.formControls[4].value !== ''}\r\n                        label={control[2].label}\r\n                        type={control[2].type}\r\n                        value={control[2].value}\r\n                        valid={control[2].valid}\r\n                        touched={control[2].touched}\r\n                        errorMessage={control[2].errorMessage}\r\n                        onChange={event => this.onChangeHandler(event, 2)}\r\n                    />\r\n\r\n                    <Input\r\n                        disabled={this.state.formControls[4].value !== ''}\r\n                        label={control[3].label}\r\n                        type={control[3].type}\r\n                        value={control[3].value}\r\n                        valid={control[3].valid}\r\n                        touched={control[3].touched}\r\n                        errorMessage={control[3].errorMessage}\r\n                        onChange={event => this.onChangeHandler(event, 3)}\r\n                    />\r\n\r\n                    <Input\r\n                        disabled={(this.state.formControls[2].value == '' || this.state.formControls[3].value == '')}\r\n                        label={control[4].label}\r\n                        type={control[4].type}\r\n                        value={control[4].value}\r\n                        valid={control[4].valid}\r\n                        touched={control[4].touched}\r\n                        errorMessage={control[4].errorMessage}\r\n                        onChange={event => this.onChangeHandler(event, 4)}\r\n                    />\r\n                    {\r\n                        (this.state.result.middleValue !== '')\r\n                        ? <div className={classes.ButtonBox}>\r\n                                <p>Средний балл:&nbsp;<span className={classes.Bold}>{Math.round(this.state.result.middleValue*10)/10}</span></p>\r\n                                <p>Процент пропущенных по неуважительной причине занятий:&nbsp;\r\n                                    <span className={classes.Bold}>{Math.round(this.state.result.procent*10)/10} %</span></p>\r\n                                <p>Экзамен сдан автоматом:&nbsp;\r\n                                    {\r\n                                        (this.state.result.exam)\r\n                                            ? <span className={classes.Bold}>Да</span>\r\n                                            : <span className={classes.Bold}>Нет</span>\r\n                                    }\r\n                                </p>\r\n                            </div>\r\n                            : null\r\n                    }\r\n                    <Button\r\n                        disabled={!this.state.isFormValid}\r\n                        onClick={() => this.calculate()}\r\n                        text={'Расчитать'}\r\n                    />\r\n                    <Button\r\n                        disabled={!this.state.isFormValid || this.state.result.middleValue === ''}\r\n                        onClick={() => this.sendInfo()}\r\n                        text={'Отправить'}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home","D:\\projects\\test-react-redux\\src\\pages\\attendance\\Attendance.js",[],"D:\\projects\\test-react-redux\\src\\components\\menu\\Menu.js",[],"D:\\projects\\test-react-redux\\src\\pages\\info\\Info.js",[],"D:\\projects\\test-react-redux\\src\\pages\\notFound\\NotFound.js",[],"D:\\projects\\test-react-redux\\src\\hoc\\Layout\\Layout.js",[],"D:\\projects\\test-react-redux\\src\\components\\footer\\Footer.js",[],"D:\\projects\\test-react-redux\\src\\components\\base\\input\\Input.js",[],"D:\\projects\\test-react-redux\\src\\components\\base\\button\\Button.js",[],["64","65"],"D:\\projects\\test-react-redux\\src\\pages\\contacts\\Contacts.js",[],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":9,"column":8,"nodeType":"72","messageId":"73","endLine":9,"endColumn":15},{"ruleId":"70","severity":1,"message":"74","line":244,"column":17,"nodeType":"72","messageId":"73","endLine":244,"endColumn":23},{"ruleId":"75","severity":1,"message":"76","line":392,"column":69,"nodeType":"77","messageId":"78","endLine":392,"endColumn":71},{"ruleId":"75","severity":1,"message":"76","line":392,"column":111,"nodeType":"77","messageId":"78","endLine":392,"endColumn":113},{"ruleId":"66","replacedBy":"79"},{"ruleId":"68","replacedBy":"80"},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"no-unused-vars","'classes' is defined but never used.","Identifier","unusedVar","'result' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["81"],["82"],"no-global-assign","no-unsafe-negation"]